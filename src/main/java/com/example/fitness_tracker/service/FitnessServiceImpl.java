package com.example.fitness_tracker.service;

import com.example.fitness_tracker.dao.UserDataDao;
import com.example.fitness_tracker.model.UserData;
import com.example.fitness_tracker.model.HistoryRecord;

import java.time.LocalDate;
import java.util.List;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ DAO.
 */
public class FitnessServiceImpl implements FitnessService {
    private final UserDataDao userDataDao;

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º DAO.
     * @param userDataDao DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    public FitnessServiceImpl(UserDataDao userDataDao) {
        this.userDataDao = userDataDao;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Ç–µ—Ä–∏ –≤–µ—Å–∞ —Å —É—á–µ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç–µ–º–ø–æ–≤.
     * @param userData –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞
     */
    @Override
    public String calculateProgress(UserData userData) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Ü–µ–ª–∏
        long days = java.time.temporal.ChronoUnit.DAYS.between(LocalDate.now(), userData.getTargetDate());
        double weightDiff = userData.getCurrentWeight() - userData.getTargetWeight();

        if (days <= 0) {
            return "–û—à–∏–±–∫–∞: —Å—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!";
        }

        // –†–∞—Å—á–µ—Ç –ø–æ –Ω–µ–¥–µ–ª—è–º (–±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥)
        double weeklyLoss = weightDiff / (days / 7.0);
        double dailyLoss = weeklyLoss / 7;

        String result = String.format("–î–ª—è —Ü–µ–ª–∏ –Ω—É–∂–Ω–æ —Ç–µ—Ä—è—Ç—å %.2f –∫–≥/–Ω–µ–¥–µ–ª—é (%.2f –∫–≥/–¥–µ–Ω—å)",
                weeklyLoss, dailyLoss);

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ
        if (weeklyLoss > 1.0) {
            result += "\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Ç–µ—Ä—è –±–æ–ª–µ–µ 1 –∫–≥/–Ω–µ–¥–µ–ª—é –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–¥–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!";
        } else if (weeklyLoss < 0.5) {
            result += "\nüí° –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π";
        } else {
            result += "\n‚úÖ –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–º–ø –ø–æ—Ö—É–¥–µ–Ω–∏—è";
        }

        return result;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
     * @param userData –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
     */
    @Override
    public String checkOvertraining(UserData userData) {
        int totalMinutes = userData.getWorkoutsThisWeek() * userData.getAvgWorkoutDuration();

        if (userData.getWorkoutsThisWeek() > 6 || totalMinutes > 420) {
            return "–ü–µ—Ä–µ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å! –û—Ç–¥—ã—Ö 2-3 –¥–Ω—è.";
        } else if (userData.getWorkoutsThisWeek() > 4 || totalMinutes > 300) {
            return "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –û—Ç–¥—ã—Ö 1-2 –¥–Ω—è.";
        } else if (userData.getWorkoutsThisWeek() < 3 || totalMinutes < 150) {
            return "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.";
        } else {
            return "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞!";
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∏–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã.
     * @param miles –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–ª—è—Ö
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
     */
    @Override
    public String convertMilesToKm(double miles) {
        double km = miles * 1.60934;
        return String.format("%.2f –º–∏–ª—å = %.2f –∫–º", miles, km);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.
     * @param userData –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param result —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
     */
    @Override
    public void saveProgressCalculation(UserData userData, String result) {
        userDataDao.saveUserData(userData);
        userDataDao.saveHistoryRecord("–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", result);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é.
     * @param userData –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param recommendation —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
     */
    @Override
    public void saveWorkoutData(UserData userData, String recommendation) {
        userDataDao.saveUserData(userData);
        userDataDao.saveHistoryRecord("–ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏", recommendation);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é.
     * @param miles –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–ª—è—Ö
     * @param result —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
     */
    @Override
    public void saveConversion(double miles, String result) {
        userDataDao.saveHistoryRecord("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", result);
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ DAO.
     * @return —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
     */
    @Override
    public List<HistoryRecord> loadHistory() {
        return userDataDao.getHistoryRecords();
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ DAO.
     * @param id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
     * @param record –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
     */
    @Override
    public void updateHistoryRecord(int id, HistoryRecord record) {
        userDataDao.updateHistoryRecord(id, record);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ DAO.
     * @param id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
     */
    @Override
    public void deleteHistoryRecord(int id) {
        userDataDao.deleteHistoryRecord(id);
    }

    /**
     * –ò—â–µ—Ç –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ DAO.
     * @param searchTerm –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @return —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
     */
    @Override
    public List<HistoryRecord> searchHistoryRecords(String searchTerm) {
        return userDataDao.searchHistoryRecords(searchTerm);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ DAO.
     * @param sortBy –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     * @param ascending –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     * @return –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
     */
    @Override
    public List<HistoryRecord> getHistoryRecordsSorted(String sortBy, boolean ascending) {
        return userDataDao.getHistoryRecordsSorted(sortBy, ascending);
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ DAO.
     * @param operationType —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @return –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
     */
    @Override
    public List<HistoryRecord> filterHistoryRecordsByType(String operationType) {
        return userDataDao.filterHistoryRecordsByType(operationType);
    }
}
