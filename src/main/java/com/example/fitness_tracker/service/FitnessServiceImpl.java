package com.example.fitness_tracker.service;

import com.example.fitness_tracker.dao.UserDataDao;
import com.example.fitness_tracker.model.UserData;
import com.example.fitness_tracker.model.HistoryRecord;

import java.time.LocalDate;
import java.util.List;

public class FitnessServiceImpl implements FitnessService {
    private final UserDataDao userDataDao;

    public FitnessServiceImpl(UserDataDao userDataDao) {
        this.userDataDao = userDataDao;
    }

    @Override
    public String calculateProgress(UserData userData) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Ü–µ–ª–∏
        long days = java.time.temporal.ChronoUnit.DAYS.between(LocalDate.now(), userData.getTargetDate());
        double weightDiff = userData.getCurrentWeight() - userData.getTargetWeight();

        if (days <= 0) {
            return "–û—à–∏–±–∫–∞: —Å—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!";
        }

        // –†–∞—Å—á–µ—Ç –ø–æ –Ω–µ–¥–µ–ª—è–º (–±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥)
        double weeklyLoss = weightDiff / (days / 7.0);
        double dailyLoss = weeklyLoss / 7;

        String result = String.format("–î–ª—è —Ü–µ–ª–∏ –Ω—É–∂–Ω–æ —Ç–µ—Ä—è—Ç—å %.2f –∫–≥/–Ω–µ–¥–µ–ª—é (%.2f –∫–≥/–¥–µ–Ω—å)",
                weeklyLoss, dailyLoss);

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ
        if (weeklyLoss > 1.0) {
            result += "\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Ç–µ—Ä—è –±–æ–ª–µ–µ 1 –∫–≥/–Ω–µ–¥–µ–ª—é –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–¥–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!";
        } else if (weeklyLoss < 0.5) {
            result += "\nüí° –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π";
        } else {
            result += "\n‚úÖ –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–º–ø –ø–æ—Ö—É–¥–µ–Ω–∏—è";
        }

        return result;
    }

    @Override
    public String checkOvertraining(UserData userData) {
        int totalMinutes = userData.getWorkoutsThisWeek() * userData.getAvgWorkoutDuration();

        if (userData.getWorkoutsThisWeek() > 6 || totalMinutes > 420) {
            return "–ü–µ—Ä–µ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å! –û—Ç–¥—ã—Ö 2-3 –¥–Ω—è.";
        } else if (userData.getWorkoutsThisWeek() > 4 || totalMinutes > 300) {
            return "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –û—Ç–¥—ã—Ö 1-2 –¥–Ω—è.";
        } else if (userData.getWorkoutsThisWeek() < 3 || totalMinutes < 150) {
            return "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.";
        } else {
            return "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞!";
        }
    }

    @Override
    public String convertMilesToKm(double miles) {
        double km = miles * 1.60934;
        return String.format("%.2f –º–∏–ª—å = %.2f –∫–º", miles, km);
    }

    @Override
    public void saveProgressCalculation(UserData userData, String result) {
        userDataDao.saveUserData(userData);
        userDataDao.saveHistoryRecord("–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", result);
    }

    @Override
    public void saveWorkoutData(UserData userData, String recommendation) {
        userDataDao.saveUserData(userData);
        userDataDao.saveHistoryRecord("–ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏", recommendation);
    }

    @Override
    public void saveConversion(double miles, String result) {
        userDataDao.saveHistoryRecord("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", result);
    }

    @Override
    public List<HistoryRecord> loadHistory() {
        return userDataDao.getHistoryRecords();
    }

    @Override
    public void updateHistoryRecord(int id, HistoryRecord record) {
        userDataDao.updateHistoryRecord(id, record);
    }

    @Override
    public void deleteHistoryRecord(int id) {
        userDataDao.deleteHistoryRecord(id);
    }

    @Override
    public List<HistoryRecord> searchHistoryRecords(String searchTerm) {
        return userDataDao.searchHistoryRecords(searchTerm);
    }

    @Override
    public List<HistoryRecord> getHistoryRecordsSorted(String sortBy, boolean ascending) {
        return userDataDao.getHistoryRecordsSorted(sortBy, ascending);
    }

    @Override
    public List<HistoryRecord> filterHistoryRecordsByType(String operationType) {
        return userDataDao.filterHistoryRecordsByType(operationType);
    }
}
