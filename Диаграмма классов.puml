@startuml FitnessTrackerClassDiagram

' Основные классы модели
class UserData {
  - currentWeight: double
  - targetWeight: double
  - targetDate: LocalDate
  - workoutsThisWeek: int
  - avgWorkoutDuration: int
  + getCurrentWeight(): double
  + setCurrentWeight(double): void
  + getTargetWeight(): double
  + setTargetWeight(double): void
  + getTargetDate(): LocalDate
  + setTargetDate(LocalDate): void
  + getWorkoutsThisWeek(): int
  + setWorkoutsThisWeek(int): void
  + getAvgWorkoutDuration(): int
  + setAvgWorkoutDuration(int): void
}

class HistoryRecord {
  - id: int
  - date: LocalDate
  - operationType: String
  - details: String
  - active: boolean
  + getId(): int
  + setId(int): void
  + getDate(): LocalDate
  + getOperationType(): String
  + getDetails(): String
  + isActive(): boolean
  + setActive(boolean): void
}

' Интерфейсы и классы DAO
interface UserDataDao {
  + saveUserData(UserData): void
  + saveHistoryRecord(String, String): void
  + getHistoryRecords(): List<HistoryRecord>
  + getUserDataById(int): Optional<UserData>
  + updateUserData(int, UserData): void
  + deleteUserData(int): void
  + getHistoryRecordById(int): Optional<HistoryRecord>
  + updateHistoryRecord(int, HistoryRecord): void
  + deleteHistoryRecord(int): void
  + updateHistoryRecordStatus(int, boolean): void
  + searchHistoryRecords(String): List<HistoryRecord>
  + getHistoryRecordsSorted(String, boolean): List<HistoryRecord>
  + filterHistoryRecordsByType(String): List<HistoryRecord>
}

class PostgresUserDataDao {
  - connection: Connection
  + PostgresUserDataDao()
  - createTablesIfNotExist(): void
  + saveUserData(UserData): void
  + saveHistoryRecord(String, String): void
  + getHistoryRecords(): List<HistoryRecord>
  + getUserDataById(int): Optional<UserData>
  + updateUserData(int, UserData): void
  + deleteUserData(int): void
  + getHistoryRecordById(int): Optional<HistoryRecord>
  + updateHistoryRecord(int, HistoryRecord): void
  + deleteHistoryRecord(int): void
  + updateHistoryRecordStatus(int, boolean): void
  + searchHistoryRecords(String): List<HistoryRecord>
  + getHistoryRecordsSorted(String, boolean): List<HistoryRecord>
  + filterHistoryRecordsByType(String): List<HistoryRecord>
}

class FileUserDataDao {
  + saveUserData(UserData): void
  + saveHistoryRecord(String, String): void
  + getHistoryRecords(): List<HistoryRecord>
  + getUserDataById(int): Optional<UserData>
  + updateUserData(int, UserData): void
  + deleteUserData(int): void
  + getHistoryRecordById(int): Optional<HistoryRecord>
  + updateHistoryRecord(int, HistoryRecord): void
  + deleteHistoryRecord(int): void
  + updateHistoryRecordStatus(int, boolean): void
  + searchHistoryRecords(String): List<HistoryRecord>
  + getHistoryRecordsSorted(String, boolean): List<HistoryRecord>
  + filterHistoryRecordsByType(String): List<HistoryRecord>
}

class InMemoryUserDataDao {
  - userDataList: ObservableList<UserData>
  - historyRecords: ObservableList<HistoryRecord>
  + getInstance(): InMemoryUserDataDao
  + saveUserData(UserData): void
  + saveHistoryRecord(String, String): void
  + getHistoryRecords(): List<HistoryRecord>
  + getUserDataById(int): Optional<UserData>
  + updateUserData(int, UserData): void
  + deleteUserData(int): void
  + getHistoryRecordById(int): Optional<HistoryRecord>
  + updateHistoryRecord(int, HistoryRecord): void
  + deleteHistoryRecord(int): void
  + updateHistoryRecordStatus(int, boolean): void
  + searchHistoryRecords(String): List<HistoryRecord>
  + getHistoryRecordsSorted(String, boolean): List<HistoryRecord>
  + filterHistoryRecordsByType(String): List<HistoryRecord>
}

' Сервисный слой
interface FitnessService {
  + calculateProgress(UserData): String
  + checkOvertraining(UserData): String
  + convertMilesToKm(double): String
  + saveProgressCalculation(UserData, String): void
  + saveWorkoutData(UserData, String): void
  + saveConversion(double, String): void
  + loadHistory(): List<HistoryRecord>
  + updateHistoryRecord(int, HistoryRecord): void
  + deleteHistoryRecord(int): void
  + searchHistoryRecords(String): List<HistoryRecord>
  + getHistoryRecordsSorted(String, boolean): List<HistoryRecord>
  + filterHistoryRecordsByType(String): List<HistoryRecord>
}

class FitnessServiceImpl {
  - userDataDao: UserDataDao
  + FitnessServiceImpl(UserDataDao)
  + calculateProgress(UserData): String
  + checkOvertraining(UserData): String
  + convertMilesToKm(double): String
  + saveProgressCalculation(UserData, String): void
  + saveWorkoutData(UserData, String): void
  + saveConversion(double, String): void
  + loadHistory(): List<HistoryRecord>
  + updateHistoryRecord(int, HistoryRecord): void
  + deleteHistoryRecord(int): void
  + searchHistoryRecords(String): List<HistoryRecord>
  + getHistoryRecordsSorted(String, boolean): List<HistoryRecord>
  + filterHistoryRecordsByType(String): List<HistoryRecord>
}

' Контроллер
class FitnessTrackerController {
  - dataSource: UserDataDao
  - fitnessService: FitnessService
  - historyData: ObservableList<HistoryRecord>
  + FitnessTrackerController()
  + initialize(): void
  + calculateProgress(): void
  + checkOvertraining(): void
  + convertToKm(): void
  + loadHistory(): void
  + editHistoryRecord(): void
  + deleteHistoryRecord(): void
  + saveEditedRecord(): void
  + cancelEditing(): void
  + handleSearch(): void
  + handleSort(): void
  + handleFilter(): void
  + toggleStatus(ActionEvent): void
}

' Связи между классами
UserDataDao <|-- PostgresUserDataDao
UserDataDao <|-- FileUserDataDao
UserDataDao <|-- InMemoryUserDataDao

FitnessService <|-- FitnessServiceImpl

FitnessTrackerController --> FitnessService
FitnessTrackerController --> UserDataDao
FitnessServiceImpl --> UserDataDao

FitnessService --> UserData
FitnessService --> HistoryRecord

@enduml